(*
    Deque.Mod
    Double-ended queue implementation using DoubleLinkedList.
    Copyright (C) 2025
    Released under The 3-Clause BSD License.
*)
DEFINITION Deque;

IMPORT Collections;

TYPE
    Deque = POINTER TO DequeDesc;

(* Constructor: Allocate and initialize a new deque. *)
PROCEDURE New(): Deque;

(* Destructor: Free the deque. *)
PROCEDURE Free(VAR dq: Deque);

(* Add an item to the front of the deque. *)
PROCEDURE Prepend(dq: Deque; item: Collections.ItemPtr);

(* Add an item to the back of the deque. *)
PROCEDURE Append(dq: Deque; item: Collections.ItemPtr);

(* Remove and return the first item. *)
PROCEDURE RemoveFirst(dq: Deque; VAR result: Collections.ItemPtr);

(* Remove and return the last item. *)
PROCEDURE RemoveLast(dq: Deque; VAR result: Collections.ItemPtr);

(* Return the number of items in the deque. *)
PROCEDURE Count(dq: Deque): INTEGER;

(* Test if the deque is empty. *)
PROCEDURE IsEmpty(dq: Deque): BOOLEAN;

(* Apply a procedure to each element in the deque. *)
PROCEDURE Foreach(dq: Deque; visit: Collections.VisitProc; VAR state: Collections.VisitorState); 

END Deque.
