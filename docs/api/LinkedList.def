(* LinkedList.mod - A singly linked list implementation.

Copyright (C) 2025

Released under The 3-Clause BSD License.
*)

DEFINITION LinkedList;

IMPORT Collections;

TYPE
    (* Opaque pointer to a List *)
    List = POINTER TO ListDesc; 

(* Constructor: Allocate and initialize a new list *)
PROCEDURE New(): List;

(* Destructor: (optional, only if you want to clear memory) *)
PROCEDURE Free(VAR list: List);

(* Append a new element. *)
PROCEDURE Append(list: List; item: Collections.ItemPtr);

(* Remove and return the first list element. *)
PROCEDURE RemoveFirst(list: List; VAR result: Collections.ItemPtr);

(* Insert a new element after a given position (0-based index). *)
PROCEDURE InsertAt(list: List; position: INTEGER; item: Collections.ItemPtr): BOOLEAN;

    (* Insert at beginning if position is 0 *)
    (* Insert within valid range *)
        (* Find the node at position-1 *)

(* Return the number of elements in the list. *)
PROCEDURE Count(list: List): INTEGER;

(* Test if the list is empty. *)
PROCEDURE IsEmpty(list: List): BOOLEAN;

(* Apply a procedure to each element in the list, passing a state variable. 
If visit returns FALSE, iteration stops. *)
PROCEDURE Foreach(list: List; visit: Collections.VisitProc; VAR state: Collections.VisitorState);

(* Get item at specified position (0-based index), returns TRUE if successful. *)
PROCEDURE GetAt(list: List; position: INTEGER; VAR result: Collections.ItemPtr): BOOLEAN;

END LinkedList.
